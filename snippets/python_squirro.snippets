snippet pipelet
	from squirro.sdk import PipeletV1, require

	@require('log')
	class ${1:ClassName}(PipeletV1):
		def __init__(self, config):
			self.config = config

		def consume(self, item):
			if 'keywords' not in item:
				return item
			${0}
			return item

snippet pipelety
	from squirro.sdk import PipeletV1, require


	class ${1:ClassName}(PipeletV1):
		def __init__(self, config):
			self.config = config

		def consume(self, item):
			for i in range(10):
			new_item = dict(item)
			new_item['title'] = '{0} ({1})'.format(item.get('title',''), i)
			${0}
			yield new_item

snippet log
	log = logging.getLogger(__name__)

snippet fp
	# first, import a similar Provider or use the default one
	from faker.providers import BaseProvider
	#
	# # create new provider class
	class ${1:ProviderClassName}(BaseProvider):
		def ${2:provider_function}(self):
			${0}

snippet sqsqlins
	from sqlalchemy import create_engine, Table, MetaData

	engine = create_engine(args.db_connection, echo=False)
	with engine.connect() as connection:
		metadata = MetaData()
		table = Table(t, metadata, autoload=True, autoload_with=connection)	
		table_insert = table.insert()
		mysql_buffer = []
		row_as_dict = {}
		mysql_buffer.append(row_as_dict)
		connection.execute(table_insert, mysql_buffer)

